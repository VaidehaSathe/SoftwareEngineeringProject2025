name: CI - pytest (Ubuntu + Windows)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch: {}

jobs:
  test:
    name: Test on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.10, 3.11, 3.12]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Cache pip on Linux
      - name: Cache pip (Linux)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Cache pip on Windows
      - name: Cache pip (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          # Windows pip cache location
          path: C:\Users\runneradmin\AppData\Local\pip\Cache
          key: windows-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            windows-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pytest pandas nltk
          fi
        shell: bash

      # For Windows, use PowerShell to install requirements if requirements.txt exists
      - name: Install dependencies (Windows fallback)
        if: runner.os == 'Windows' && !env.HAS_REQS
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if (Test-Path requirements.txt) {
            pip install -r requirements.txt
          } else {
            pip install pytest pandas nltk
          }
        shell: pwsh

      - name: Prepare NLTK data (Linux / macOS)
        if: runner.os != 'Windows'
        run: |
          python - <<'PY'
import nltk, os
d = os.path.join(os.environ.get("RUNNER_TEMP", "/tmp"), "nltk_data")
os.makedirs(d, exist_ok=True)
nltk.download(['punkt','averaged_perceptron_tagger','wordnet','stopwords'], download_dir=d)
print("NLTK data installed to:", d)
PY
        shell: bash

      - name: Prepare NLTK data (Windows)
        if: runner.os == 'Windows'
        run: |
          $d = Join-Path $env:RUNNER_TEMP "nltk_data"
          python - <<'PY'
import nltk, os, sys
d = os.path.join(os.environ.get("RUNNER_TEMP", r"C:\windows\temp"), "nltk_data")
os.makedirs(d, exist_ok=True)
nltk.download(['punkt','averaged_perceptron_tagger','wordnet','stopwords'], download_dir=d)
print("NLTK data installed to:", d)
PY
          # Persist NLTK_DATA for subsequent steps
          Add-Content -Path $env:GITHUB_ENV -Value "NLTK_DATA=$($env:RUNNER_TEMP)\n"
        shell: pwsh

      # Make sure NLTK_DATA env exists for non-Windows (set in GITHUB_ENV)
      - name: Export NLTK_DATA env (Linux)
        if: runner.os != 'Windows'
        run: |
          echo "NLTK_DATA=${RUNNER_TEMP}/nltk_data" >> $GITHUB_ENV
        shell: bash

      - name: Show system info
        run: |
          python -V
          python -c "import sys, platform; print(platform.platform(), platform.machine())"
          pip --version
          pip list --format=columns
        shell: bash

      - name: Run tests with pytest
        env:
          NLTK_DATA: ${{ runner.temp }}/nltk_data
        run: |
          pytest -q
        shell: bash

